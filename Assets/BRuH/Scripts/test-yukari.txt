pattern { 
	bosses {
		bruh.yukari 
		bruh.junko 
	} {
		1 0
		3 1
		5 0
		7 1
	}
}

!!{ me yukari
!!{ other junko
!!{ loco lbeh $other

phase 0
	paction 0
		@ { $other }
			position -15 0
		shift-phase-to 2


!{ power1()
sync powerup1 <> powerup2
	x-powerup-1 x-powerdown-1
	witha 0.9 lerp 0 1 t purple pink
	witha 0.9 yellow
	1.5 2 0 0.5
!}
!{ jpower1()
sync powerup1 <> powerup2
	x-powerup-1 x-powerdown-1
	witha 0.9 lerp 0 3 t red pink
	witha 0.9 blue
	1.5 2 0 0.5
!}
!{ jpower2()
sync powerup1 <> powerup2
	x-powerup-1 x-powerdown-1
	witha 0.5 lerp 0 3 t red pink
	witha 0.5 blue
	1.5 2 0 0.5
!}
!{ power1long()
sync powerup1 <> powerup x-powerup-1
	witha 0.9 lerp 0 2.5 t purple yellow
	3 5
!}
!{ jpower1long()
sync powerup1 <> powerup x-powerup-1
	witha 0.9 lerp 0 3 t red blue
	3 5
!}


## 1
<!> challenge introdialogue
<!> dialogue #{
phase 0
	saction 0
		move-target 3 io-sine cy 1
		dialogue simp.dialogue.1.1
		shift-phase
#}

##1
<!> type non `Border of Wave, Particle, Vector, and Curve` #{
<!> hpi 27000 5
<!> root 0 2
<!> rootother $other 0 0.5
phase 42
	paction 0
		timer restart pt
		async gem-*/w <> gcr2 6 _ <> {
			frv2	a sine 8p 700 timersec(pt)
			start swt =f 100
			p this
		} gsr2c 6 {
			color { yellow purple }
			bindLR
		} s :: {
			rt	- t &swt
		} polar
			lssht -6 (+ &swt 0.3) * 2.4 t * 0.5 t
			* &lr lssht 0.8 (+ &swt 1) 0 * 12 t
		gtr2 4.5s _ <> {
			wait-child
			timereset
			start aoff =f 0
			postloop aoff +=f / 360h 5
!!{ spokes 6
!!{ crep 12
		} saction 0 
			@ $other
				$jpower2
			wait 1.5
!!{ maxt 1.5
			bullet-control once gem-* batch onscreen loc {
				updatef swt t _
				restyleeffect circle-red/w cwheel-red/ > &.lr 0
				restyleeffect circle-blue/w cwheel-blue/ < &.lr 0
			}
			
#}


##2
<!> challenge destroy
<!> challenge graze 60
<!> challenge destroytimed 24
<!> type timeout `Border of Wave, Particle, Plane, and Sphere` #{
<!> root 0 3
<!> rootother $other -4 -3
phase 50
	paction 0

!!{ r0 3
!!{ r1 4
!!{ r lerpt 0 3 $r0 $r1
!!{ phi lssht -2 1 * 50 t * 9 t
!!{ theta + &.ang * 6 t
	paction 0
!{ fromto(from, to, when)
bullet-control _ %from restyle %to %when
!}
!{ fromtos(from, to, soft, when)
bullet-control _ %from restyleeffect %to %soft %when
!}
!{ psigt(from, to)
$fromto(%from, %to, > mod 360 $phi 180)
!}
!{ psiltC(from, to)
bullet-control _ %from softcull cwheel-yellow/ < mod 360 $phi 180
!}
!{ thetagt(from, to, soft)
$fromtos(%from, %to, %soft, > mod 360 $theta 180)
!}
!{ thetalt(from, to, soft)
$fromtos(%from, %to, %soft, < mod 360 $theta 180)
!}
		$psiltC(circle-red/w, circle-blue/w)
		$psigt(circle-blue/w, circle-red/w)
		$psiltC(circle-red/b, circle-blue/b)
		$psigt(circle-blue/b, circle-red/b)
		$thetalt(circle-blue/w, circle-blue/b, cwheel-blue/)
		$thetagt(circle-blue/b, circle-blue/w, cwheel-blue/)
		$thetagt(circle-red/w, circle-red/b, cwheel-red/)
		$thetalt(circle-red/b, circle-red/w, cwheel-red/)
		pool-control circle-purple/w cullrad 0.5
		timer restart pt
		@ $other
			_ 0.5 $jpower1
		bullet-control _ gem-yellow/w restyleeffect circle-blue/w cwheel-blue/ | > t 2 & > timersec(pt) 2 > t 1
!!{ pctrl > t 1
		bullet-control _ gem-purple/w copynull cwheel-purple/ onlyonce > t - 1 1f
		bullet-control _ gem-purple/w restyleeffect circle-purple/w cwheel-purple/ $pctrl
		async gem-purple/w <> gcr2 1 _ <> {
				delay 1s
				frv2	a sine 5p 900 timersec(pt)
				start yoff =f y
		} gsr2c 5 {
		} s offset
			px if $pctrl 
				+ lerp 2 8 timersec(pt) 6 4.1 * 2 (-m t 1) 
				lssht 2 0.5 0 * 2.5 t
			py if $pctrl neg &yoff 0
		gtr2 0 _ <360h> {
			wait-child
		} saction 0 :3
			async gem-yellow/w <> gcr3 22 9s <> {
				p this
			} gsr2c 5 {
				preloop ang =f + [&rv2].a * 10p p
			} gsr {
				frv2	a sine 7p 700 timersec(pt)
			} s nroffset 
				lerpsmooth io-sine 1.3 4 (max t lerpsmooth io-sine 0 4 t t (min 4 timersec(pt)))
				rotify px * (lerp 3 7 timersec(pt) 3 1.7) t
				+ py neg $r0
					qrotate px -75 fromsphere
						$r
						pxy $theta $phi
			$power1
			wait 1.5
#}


##3
<!> type non `Border of Wave, Particle, Offset, and Origin` #{
<!> hpi 30000 5
<!> root 0 2.5
<!> rootother $other 0 1
phase 36
	paction 0
		timer restart pt
		pool-control gem-purple/w cullrad 15
		pool-control circle-blue/b allowcull false
		gtr2 7.5s _ <> {
			delay 1s
		} saction 0 :3
			@ $other
				$jpower2
			wait 1.5
			bullet-control once gem-purple/w batch & > y -6 in t 0.4 3.4 {
				updatef tret t _
				time 100 _
				restyleeffect circle-blue/b cwheel-blue/ _
				sfx x-transform-2 _
			}
		bullet-control _ circle-blue/b batch > t + 100.7 * / 3 1.4 &.tret {
			restyleeffect circle-red/w cwheel-red/ _
		}
		async gem-purple/w <> gcr2 7 _ <> {
			preloop { 
				th		=f * 20 timersec(pt)
				r		=f + 0.3 * 1.8 cosdeg * 5 &th
				ox	=f * &r cosdeg &th
				oy	=f * &r sindeg &th
				tret	=f 0
			}
			frv2 nrot &ox &oy sine 5p 700 timersec(pt)
		} gsr2c 6 {
		} s tp
			if < t 100 
				px lerpt 0 0.3 0 3
				px lerpt 100 101.2 1.4 -1.4
			switchH + 100 * * 0.9 / 3 1.4 &tret
				zero
!!{ tback 1.5
				eased io-sine $tback * / -1 $tback pxy &ox + &oy 1.5
#}


##4
<!> challenge destroy
<!> challenge destroytimed 29
<!> challenge graze 40
<!> type spell `Border of Wave, Particle, Line, and Shape` #{
<!> hpi 20000 5
<!> root 0 1.5
<!> rootother $other 0 3
phase 36
	paction 0
!!{ jt 2
		beh-control persist gdlaser-yellow/b restyle gdlaser-red/b > t $jt
		beh-control persist gdlaser-purple/b restyle gdlaser-blue/b > t $jt
		beh-control persist gdlaser-yellow/ restyle gdlaser-red/ > t $jt
		beh-control persist gdlaser-purple/ restyle gdlaser-blue/ > t $jt
		
		timer restart pt
		async gem-purple/w <> gcr2 10 _ <> {
			frv2	a sine 8p 800 timersec(pt)
		} gsr2c 5 {
		} s tprot cx 3.4
		
		gtr2 0.8s _ <> {
			bindUD
			p this
			wait-child
		} paction 0 :2
			@ $other
				saction 0 :4
!!{ movet1 1.5
					wait - + $movet1 $jt 1.5
					$jpower1
					wait 1.5
					move-target 2 io-sine pxy * 1.5 &ud y
					
			sync icrow <> gsr2 3 <> {
				p this
				root zero
			} gsr2 2 <> {
				bindLR
			} summonr null pxy (+ [lbeh $other].x * &rl + 1 * 1.2 p) * 6 &ud
				saction 0 :5
					move-target $movet1 io-sine pxy x + -0.2 * 3.5 &ud
					async gdlaser-* <> iparent this gsr {
						colorf { yellow/b purple/b } pmz1 &lr
!!{ len 3.5
					} laser (nroffset px lerpsmooth io-sine 3 6 t 0 * &lr / $len tau) 2 _ {
						dsfx
						length $len
						s	0.6
						dynamic tprot :: {
							elt	-m &lt $jt
!!{ per 3
						} rotate
							limit (lerpsmooth out-sine 0 $per &elt 120 360) * * &ud &rl * (lerpsmooth out-sine 0 $per &elt 0 / 360 $len) lerpsmooth out-sine 0 $per &elt (-m t 4) (-m t 0)
							py * * &ud -1 lerpsmooth out-sine 0 $per &elt / 20 $len 1
					}
					wait + -0.5 + + (+$jt $per) * 1.2 p * 0.3 &lr
					sfx x-crow
					move _ tpnrot * (lerpsmooth io-sine 0 2 t 0 1) ss0 vhome 5 Lplayer
				{ }
#}


##5
<!> type non `Border of Wave, Particle, Area, and Perimeter` #{
<!> hpi 19000 5
<!> root 0 2.5
<!> rootother $other 0 1.5
phase 36
	paction 0
		timer restart pt
		pool-control gem-purple/ cullrad 15
		pool-control circle-blue/ allowcull false
		pool-control circle-red/ allowcull false
		bullet-control persist circle-* time 100 < t 100
		@ $other
			paction 0 :2
				move _ nroffset px sine 4p 1.8 t
				gtr2 2s _ <> {
					delay 1s
					wait-child
					bindLR
				} saction 0 :3
					$jpower1
					wait 1.5
!!{ range (lerp 0 20 timersec(pt) 0 10)
!{ makeCtrl(from, to, spd, eff) 
bullet-control once %from batch (and > y -2.5 onscreenby $range loc) {
	updatef {
		nang	angleto $loco
		nspd	%spd
		nlayer	ceil * 5 clamp 0.01 0.99 lerp01 / (distto $loco)  (+ $range disttowall $loco (- loc $loco)) -0.1 1.1
	} _
	updatev2 {
		nloc		+ $loco * (+ 0.2 * 0.24 &.nlayer) norm (- loc $loco)
	} _
	copy %to _
	##restyle %to _
	copynull %eff _
}

!}
					if > &lr 0
						$makeCtrl(gem-purple/w, circle-red/, 1.3, cwheel-purple/)
						$makeCtrl(gem-purple/w, circle-blue/, 1.6, cwheel-purple/)
		
		async gem-purple/w <> gcr2 6 _ <> {
			frv2	a sine 8p 700 timersec(pt)
			start {
				nloc =v2 zero
				nang =f 0
				nspd =f 0
				nlayer =f 0
			}
		} gsr2c 8 {
!!{ tsw 100.5
		} s tpnrot switchH $tsw
			rotify px lerpt 99 $tsw 4 0
!!{ tin 3
!!{ layerOffset - (* -0.5 - &.nlayer 1) $tin
			if < t $tin
				easedvhomet io-sine $tin &nloc
				rx
					lerp 0 0.3 (+ t $layerOffset) 0 &nspd
					&nang
		bullet-control persist circle-blue/ batch > t - $tsw $layerOffset {
			 restyleeffect circle-blue/w cwheel-blue/ _
			 sfx x-fire-burst-1 _
		}
		bullet-control persist circle-red/ batch > t - $tsw $layerOffset {
			 restyleeffect circle-red/w cwheel-red/ _
			 sfx x-fire-burst-2 _
		}
#}


##6
<!> challenge destroytimed 29
<!> challenge destroytimed 24
<!> challenge destroy
<!> type spell `Border of Wave, Particle, View, and Reflection` #{
<!> hpi 27000 5
<!> root 0 1
<!> rootother $other 0 2.5
phase 42
	paction 0
		timer restart pt
			
!!{ cl < x -5
!!{ cr > x 5
!!{ cu > y 4
!!{ cd < y -5
!!{ cx | $cl $cr
!!{ cy | $cu $cd
!!{ condu | $cx $cu
!!{ condl | $cy $cl
!!{ condd | $cx $cd
!!{ condr | $cy $cr
!!{ cond select @0 cmdloop { $condu $condl $condu $condr $condu }

		@ $other
			gtr2 0 _ <> {
				wait-child
				p this
			} saction 0
				savef cmdloop 0 p
				$jpower1
				wait 1.5
				timer restart st
!!{ tctrl 8
				bullet-control < timersec(st) $tctrl gem-yellow/w softcull cwheel-yellow/ $cond
				bullet-control < timersec(st) $tctrl empty sm $cond
					sync gpather-blue/w <> gsr {
						face d
						start rv2.a =f  if $cx - 180 &ang neg &ang
						sfx x-fire-tech-8
					} pather 1 0.5 tprot cx 3.4 { }
				wait $tctrl
				sfx x-boom
				move-target 1.5 io-sine pxy (* -3 (if even p) pm1 // p 2 0) (* 2.5 (if odd p) 1 0)
				break
	
!!{ mov tprot px lerpt 0 0.6 1 2
!!{ erpt 60
		bullet-control _ empty cull | $cx $cy
		async empty <> gcr2 180 _ aphi $erpt {
		} gsr2c $erpt {
			preloop ang =f [&rv2].a
			expose { f ang }
		} s $mov
		async gem-yellow/w <> gcr2 10 _ <> {
			frv2	a sine 7p 1100 timersec(pt)
			p this
		} gsr2c 5 {
		} s $mov

#}


##7
<!> type spell `Border of Wave, Particle, Continuity, and Gap` #{
<!> hpi 27000 5
<!> root 0 2
<!> rootother $other 0 0.5
phase 42
	paction 0
		timer restart pt
!!{ crep 5
!!{ wait2 if divby 8 ++ t 160 30
!!{ bowap sine 9p 1200 timersec(pt)
!!{ maxt 1.3
!!{ fdelay + 0.2 * 1.3 - $maxt &.tret
		bullet-control _ circle-blue/w time 100 < t 100
		bullet-control _ circle-blue/w sm > t + 100 $fdelay
			sync gpather-red/w <> pssfx x-fire-tech-6 pather 1 0.7 tprot cx 3 {  }
		bullet-control _ circle-blue/w softcull cwheel-red/ > t + 100 $fdelay
		gtr2 3s _ <> {
		} saction 0
			@ $other
				$jpower2
			wait 1.5
			bullet-control once gem-purple/w batch < t $maxt {
				 updatef tret t _
				copy circle-blue/w _
				copynull cwheel-blue/ _
			}
			break
		async gem-purple/w <> gcr2 4 _ <> {
			frv2	a $bowap
			start tret =f 0
			expose { f tret }
		} gsr2c $crep {
		} s tprot px lerpt3 (0.2 0.8 1 1.3) 1 4
			lerpt 100 100.3 1 0
#}


##8
<!> type spell `Border of Wave, Particle, Circle, and Lily` #{
<!> hpi 27000 5
<!> root 0 2
<!> rootother $other 0 0.5
phase 42
	paction 0
		timer restart pt
		bullet-control _ gem-yellow/w sfx x-transform-1 > t 1.5
		bullet-control _ gem-yellow/w restyleeffect circle-red/w cwheel-red/ & > t 1.5 = &.layer 0
		bullet-control _ gem-yellow/w restyleeffect circle-blue/w cwheel-blue/ & > t 1.5 = &.layer 1
		async gem-purple/w <> gcr2 9 _ <> {
			frv2	a sine 8p 700 timersec(pt)
		} gsr2c 5 {
		} s tprot cx 3
		gtr2 lerpt 0 5 3s 2s _ <> {
			wait-child
			timereset
			start aoff =f 0
			postloop aoff +=f / 360h 5
!!{ spokes 6
!!{ crep 12
		} paction 0 
			@ $other
				$jpower2
			async gem-yellow/w <> gcr2 6 * 2 $crep <> {
				sfx x-fire-loop-1
				start {
					nloc =v2 zero
					nang =f 0
					nspd =f 0
					nlayer =f 0
				}
				preloop { 
					a1 =f sine 8 700 timersec(pt)
					a2 =f * / / 360 $spokes $crep t
					layer =f if (< t $crep) 0 1
				}
			} gsr2c $spokes {
			} s :: {
				gt		+ t &st
			} roffset
				lerpsmooth io-sine 1.3 2.7 t
					rx
						* 1.7 t
						&a1
					rx 
						 + -1 + * -1 &layer * * 1 &gt ++ sine 1 (* 0.22 rangesoftmod 1 * / + &a &a2 360 24) (/ &gt 5)
						+ (if = &layer 0 * 14 &gt * -7 &gt) + &a2 &aoff
#}


##9
<!> type final `Border of Wave, Particle, Wisdom, and Power` #{
<!> hpi 48000 2
<!> root -2 2
<!> rootother $other 2 2
phase 52 
	paction 0
!{ powerboth()
	gtr { } { 
		$power1long()
		@ $other
			$jpower1long()
	}
!}
		$powerboth()
		_ 1 $powerboth()
		_ 1.8 $powerboth()
		_ 2.5 $powerboth()
		_ 3.1 $powerboth()
		_ 3.5 $powerboth()
		draiko 2 8
		_ 4 shift-phase
#}

## 3
<!> challenge enddialogue
<!> dialogue #{
phase 0
	saction 0
		move-target 3 io-sine cy 0
		dialogue simp.dialogue.1.2
		move-target 2 in-sine cy 10
		shift-phase
#}


///

## ???TODO: rolling circles: fire bowap, periodically group several layers into cirlces that roll down or from side. small part of the bowap ocntinues normally. note that it should lerp into the circle mostly before it lerps to the new source in order to show the visual coherency [Border of Wave, Particle, Roll, and Slide]

///

##2 (concept incomplete, superseded by divebomb crows)
<!> type timeout `Border of Wave, Particle, Line, and Curve` #{
phase 0
	paction 0
		position 0 2
		@ $other
			position 0 1
!!{ jt 2
		beh-control persist gdlaser-yellow/b restyle gdlaser-red/b > t $jt
		beh-control persist gdlaser-pink/b restyle gdlaser-blue/b > t $jt
		beh-control persist gdlaser-yellow/ restyle gdlaser-red/ > t $jt
		beh-control persist gdlaser-pink/ restyle gdlaser-blue/ > t $jt
		@ $other
			_ - $jt 1.5 $jpower1
		sync gdlaser-* <;-10:>  gsr2 4 <180> {
			color { yellow/b pink/b yellow/ pink/ }
			p this
		} gsr2 2 rx - 4 * 0.6 &pi {
			center
			bindLR
			root Lplayer
		} laser null 1 6 {
			dsfx
			length 50
			s	0.6
			dynamic tprot :: {
				elt	-m &lt $jt
!!{ per 4
			} rotate
				limit (lerpsmooth out-sine 0 4 &elt 120 300) * &rl  * (lerpsmooth out-sine 0 4 &elt 0 + 12 * 6 p) lerpsmooth out-sine 0 4 &elt (-m t 12) (-m t 9)
				py 1
		}
		
#}


